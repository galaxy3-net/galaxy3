#!/usr/bin/env bash

set -eE
trap "die \$LINENO \$BASH_COMMAND" ERR

function info () {
  printf "\n\t%s" "${1}"
}

function git_clone () {
  info "Cloning Repository ${VAGRANT_DIR} from ${GIT_REPO}\n\n"
  info "git clone --branch ${GIT_BRANCH} ${GIT_REPO} ${VAGRANT_DIR}\n\n"
  git clone --branch ${GIT_BRANCH} ${GIT_REPO} ${VAGRANT_DIR}
  git_update
}

function git_update () {
  info "Pulling update from branch ${GIT_BRANCH} to ${VAGRANT_DIR}"
  cd "${VAGRANT_DIR}"  2>/dev/null || die "${VAGRANT_DIR} directory does not exist"
  git status
  git branch
  git pull -ff

  get_inventory
  get_ansible_requirements
}

function manage_plugins () {
  info "Checking Vagrant Plugins & Updating Them"
  vagrant plugin update
  plugins=(vagrant-vbguest micromachine vagrant-disksize)
  for plugin in ${plugins[@]}
  do
    info "Vagrant - checking plugin - ${plugin}"
    vagrant plugin list | egrep "${plugin}"  2>/dev/null || vagrant plugin install ${plugin}
  done

}

function get_inventory () {
  info "Pulling latest inventory file"
  curl -sL -o ${G3HOME}/vagrant/${boxname}/hosts https://armory.galaxy3.net/vagrant/pkgs/files/etc/ansible/hosts
}

function get_ansible_requirements () {
  info "Pulling the latest Ansible Requirements File"
  curl -sL -o ${G3HOME}/vagrant/${boxname}/requirements.yml https://armory.galaxy3.net/vagrant/pkgs/files/etc/ansible/requirements.yml
}

function die () {
    info "Error: line - ${1} command - ${2}"
    exit 1
}

function check_disk_space () {
  if [[ $(df / | tail -1 | awk '{printf("%d", $4/1024000)}') -lt 2300 ]]
  then
    echo "Insufficient Disk space available: $(df / | tail -1 | awk '{printf("%d", $4/1024000)}')G"
    exit 1
  fi
}

function check_out_of_date () {

  if [ $(cd ~/galaxy3 && git remote show origin | egrep '(local out of date)' - 2>&1 >/dev/null ; echo $?) -eq 0 ]
  then
    echo "Galaxy3 - An updated version is available."
    echo "Galaxy3 - run g3update to pull the latest version"
  else
    echo "Galaxy3 - up to date."
  fi
}

check_disk_space

info "Source G3 Common"
export G3HOME="$(dirname ${0})"
export G3HOME="$(dirname ${G3HOME})"
export vbox_dir="${G3HOME}/vagrant"
export VBOX_DIR="${G3HOME}/vagrant"
. $(dirname ${0})/g3common

export boxname=$(basename ${0}) && info "boxname is set to ${boxname}"
#which VBoxManage || export PATH=/c/Program\ Files/Oracle/VirtualBox:${PATH}

[ "${VBOX_DIR:-notset}" == "notset" ] && export VBOX_DIR="$(vbox_dir)/${boxname}"
info "VBOX_DIR is set to ${VBOX_DIR}"

BASE_BOX="$(expr ${boxname} : '\(.[^-]*\)[-]*.*')" || BASE_BOX="error"
info "BASE_BOX=${BASE_BOX}"
ENV_NAME="$(expr ${boxname} : '.[^-]*[-]*\(.*\)')" || ENV_NAME=""
info "ENV_NAME=${ENV_NAME}"
export GIT_BRANCH="${BASE_BOX}" && info "GIT_BRANCH=${GIT_BRANCH}"
export VAGRANT_DIR="${G3HOME}/vagrant/${BASE_BOX}/${ENV_NAME}" && info "VAGRANT_DIR=${VAGRANT_DIR}"
export GIT_REPO="${GIT_HUB}/${BASE_BOX}.git" && info "GIT_REPO=${GIT_REPO}"

cat <<__EOD__

  Default Virtualbox VM Directory: ${VBOX_DIR}

  - - ${boxname} ${*} - -

  VAGRANT_DIR ${VAGRANT_DIR}
  G3HOME ${G3HOME}
__EOD__

cd "${VAGRANT_DIR}" 2>/dev/null || git_clone
cd "${VAGRANT_DIR}" 2>/dev/null || die "${VAGRANT_DIR} directory does not exist"
#info "Confirming VirtualBox Installation . . . "
#which VBoxManage || info "Virtualbox Not Installed\n\nAborting . . ."
#which vagrant || info "vagrant Not Installed\n\nAborting . . ."

case "${1}" in

  "up" | "resume" | "reload")  manage_plugins && git_update && vagrant ${*}
        stat ./post_deploy.sh 2>/dev/null && sh ./post_deploy.sh
    ;;

   *)  vagrant ${*}
       ;;
esac
check_out_of_date
exit 0
