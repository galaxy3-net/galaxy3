#!/usr/bin/env bash

function state () {
  # echo "Checking the state" >&2
  echo $(vagrant status --machine-readable | egrep 'default,state' | grep -v "human" | awk -F, '{print $4}')
}

function vbox_dir () {
  echo $(VBoxManage list systemproperties | egrep '^Default machine folder' | cut -d: -f2 | awk '{$2=$2};2')
}

function reload () {

  case "$(state)" in

    "poweroff" | "saved" | "running" | "aborted") git_update && vagrant ${*}
      ;;

    "not_created") dir_exists || git_update && vagrant ${*}
      ;;

    *) echo "state is $(state)"
      exit 1
      ;;
  esac
  return
}

function up () {

  case "$(state)" in

    "running")
      printf "\n\t${boxname} is already running\n\n"
      ;;

    "poweroff" | "saved" | "aborted") git_update && manage_plugins &&  vagrant ${*}
      ;;

    "not_created") dir_exists || git_update && manage_plugins && vagrant ${*}
      ;;

    *) echo "state is $(state)"
      exit 1
      ;;
  esac
  return
}

function resume () {
  case "$(state)" in

    "saved")  git_update && manage_plugins && vagrant ${*}
      ;;

    *) echo "state is $(state)"
       ;;
  esac
  return
}

function halt () {
  case "$(state)" in

    "running")  vagrant ${*}
      ;;

    *) echo "state is $(state)"
       ;;
  esac
  return
}

function suspend () {
  case "$(state)" in

    "running")  vagrant ${*}
      ;;

    *) echo "state is $(state)"
       ;;
  esac
  return
}

function destroy () {
  case "$(state)" in

    "running" | "poweroff" | "saved" | "aborted")
        cat <<__EOD__
  WARNING: This will destroy this machine and any data/files saved on it.
  Type DESTROY to confirm.
__EOD__
        read input
        [ "${input}" == "DESTROY" ] && vagrant ${*}
        [ "${input}" != "DESTROY" ] && echo 'cancelled destroy'
      ;;

    *) echo "state is $(state)"
       ;;
  esac
  return
}

function dir_exists () {
  ls -d "${VBOX_DIR}/${boxname}" || return
  cat <<__EOD__

  While Vagrant's machine state is "not_created", the "${VBOX_DIR}/${boxname}"
  directory already exists

  1) Confirm that the box ${boxname} is not already running in Virtualbox.
     a) If it is running, it will need to be removed along with the directory and files from
        Virtualbox before continuing.
  2) If there is no ${boxname} already running in Virtualbox.
     a) Rename "${VBOX_DIR}/${boxname}"
     or
     b) Remove "${VBOX_DIR}/${boxname}"

__EOD__
  exit 1
}

function Virtualbox_VMs () {
  ls -d "${VBOX_DIR}" && return

  cat <<__EOD__

  Either Virtualbox is not installed or the default machine directory
  ${VBOX_DIR} has been changed.

__EOD__

  exit 1
}

function ssh_rdp () {
  case "$(state)" in

    "running")
        echo vagrant ${*}
        vagrant ${*}
      ;;

    *) echo "cannot ${1} into ${boxname} - state is $(state)"
       ;;
  esac
  return
}

function git_clone () {
  echo "git clone  ${GIT_HUB}/${boxname}.git ${G3HOME}/vagrant/${boxname}"
  git clone  ${GIT_HUB}/${boxname}.git ${G3HOME}/vagrant/${boxname}
  cd ${G3HOME}/vagrant/${boxname} && git checkout ${boxname} ; git pull
  get_inventory
  get_ansible_requirements
}

function git_update () {
  echo "Pulling Update for repo ${G3HOME}/vagrant/${boxname}"
  cd ${G3HOME}/vagrant/${boxname} && git checkout ${boxname} ; git pull
  get_inventory
  get_ansible_requirements
  echo "Installing/Updating vagrant plugins"
}

function manage_plugins () {
  vagrant plugin update
  plugins=(vagrant-vbguest micromachine)
  for plugin in ${plugins[@]}
  do
    echo "Vagrant - checking - ${plugin}"
    vagrant plugin list | egrep "${plugin}" || vagrant plugin install ${plugin}
  done

}

function get_inventory () {
  curl -sL -o ${G3HOME}/vagrant/${boxname}/hosts https://armory.galaxy3.net/vagrant/pkgs/files/etc/ansible/hosts
}

function get_ansible_requirements () {
  curl -sL -o ${G3HOME}/vagrant/${boxname}/requirements.yml https://armory.galaxy3.net/vagrant/pkgs/files/etc/ansible/requirements.yml
}


. $(dirname ${0})/g3common
export boxname=$(basename ${0})
[ "${VBOX_DIR:-notset}" == "notset" ] && export VBOX_DIR="$(vbox_dir)"
cat <<__EOD__

  Default Virtualbox VM Directory: ${VBOX_DIR}

  - - ${boxname} ${*} - -

__EOD__


# printf "\n - - ${boxname} ${*} - -\n\n"


case ${boxname} in

  'bespin' | \
  'thebox' | \
  'vulpter' | \
  'corellia' | \
  'manaan' | \
  'kamino' | \
  'endor' | \
  'naboo')
      stat ${G3HOME}/vagrant/${boxname} || git_clone
      ;;

  *)
      echo get_machine ${boxname}
      ;;
esac

echo "Dir ${HOME}/galaxy3/vagrant/${boxname}"

#cd ${HOME}/galaxy3/vagrant/${boxname}
cd ${G3HOME}/vagrant/${boxname}

Virtualbox_VMs

case "${1}" in

  "destroy") destroy ${*}
    ;;

  "reload")  reload ${*}
    ;;

  "up" | "resume")  up ${*}
    ;;

  "halt" | "suspend")  halt ${*}
    ;;

  "port") vagrant port
    ;;

  "status") vagrant status
    ;;

  "ssh" | "rdp") ssh_rdp ${*}
    ;;

  "box") vagrant ${*}
    ;;

   *)  echo "usage" ; exit 1
       ;;
esac
