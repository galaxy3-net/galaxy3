#!/usr/bin/env bash

function state () {
  #echo $(VBoxManage showvminfo "${boxname}" | egrep '^State:' | awk '{print $2}' || echo 'Dead')
  echo $(vagrant status --machine-readable | awk -F, '$3=="state" { print $4 }')
}

function vbox_dir () {
  echo $(VBoxManage list systemproperties | egrep '^Default machine folder' | sed 's/^Default machine folder://' |\
  sed 's/^[ ]*//')
}

function reload () {

  case "$(state)" in

    "poweroff" | "saved" | "running" | "aborted" | "") git_update && clean_vagrantfile && vagrant ${*}
      ;;

    "not_created") dir_exists || git_update && vagrant ${*}
      ;;

    *) echo "state is ($(state))"
      exit 1
      ;;
  esac
  return
}

function up () {

  case "$(state)" in

    "running")
      printf "\n\t${boxname} is already running\n\n"
      ;;

    "poweroff" | "saved" | "aborted" | "powered" | "") git_update && manage_plugins && clean_vagrantfile && vagrant ${*}
      ;;

    not_created) dir_exists || git_update && manage_plugins && clean_vagrantfile && vagrant ${*}
      ;;

    *) echo "Cannot start, state is ($(state))"
      exit 1
      ;;
  esac
  return
}

function resume () {
  case "$(state)" in

    "saved")  git_update && manage_plugins && clean_vagrantfile && vagrant ${*}
      ;;

    *) echo "Cannot resume, state is ($(state))"
       ;;
  esac
  return
}

function halt () {
  case "$(state)" in

    "running")  vagrant ${*}
      ;;

    *) echo "Cannot halt, state is ($(state))"
       ;;
  esac
  return
}

function suspend () {
  case "$(state)" in

    "running")  vagrant ${*}
      ;;

    *) echo "Cannot procees, state is ($(state))"
       ;;
  esac
  return
}

function clean_vagrantfile () {
  cat <<__EOD__

  Checking OS

  ${MINGW_CHOST:=undefined}

__EOD__

  if [ "${MINGW_CHOST:=undefined}" != "undefined" ]
  then
    mv Vagrantfile Vagrantfile.tmp
    egrep -v 'nicpromisc0|nictype0' Vagrantfile.tmp > Vagrantfile
    rm Vagrantfile.tmp
  fi
}

function destroy () {
  case "$(state)" in

    "running" | "poweroff" | "saved" | "aborted")
        cat <<__EOD__
  WARNING: This will destroy this machine and any data/files saved on it.
  Type DESTROY to confirm.
__EOD__
        read input
        [ "${input}" == "DESTROY" ] && vagrant ${*}
        [ "${input}" != "DESTROY" ] && echo 'cancelled destroy'
      ;;

    *) echo "Cannot destroy, state is ($(state))"
       ;;
  esac
  return
}

function dir_exists () {
  ls -d "${VBOX_DIR}/${boxname}" || return
  cat <<__EOD__

  While Vagrant's machine state is "not_created", the "${VBOX_DIR}/${boxname}"
  directory already exists

  1) Confirm that the box ${boxname} is not already running in Virtualbox.
     a) If it is running, it will need to be removed along with the directory and files from
        Virtualbox before continuing.
  2) If there is no ${boxname} already running in Virtualbox.
     a) Rename "${VBOX_DIR}/${boxname}"
     or
     b) Remove "${VBOX_DIR}/${boxname}"

__EOD__
  exit 1
}

function ssh_rdp () {
  case "$(state)" in

    "running")
        echo vagrant ${*}
        vagrant ${*}
      ;;

    *) echo "cannot ${1} into ${boxname} - state is $(state)"
       ;;
  esac
  return
}

function git_clone () {
  echo "git clone --branch ${boxname}  ${GIT_HUB}/${boxname}.git ${G3HOME}/vagrant/${boxname}"
  git clone --branch ${boxname} ${GIT_HUB}/${boxname}.git ${G3HOME}/vagrant/${boxname}
  cd ${G3HOME}/vagrant/${boxname} && git checkout ${boxname} ; git pull
  get_inventory
  get_ansible_requirements
}

function git_update () {
  echo "Pulling Update for repo ${G3HOME}/vagrant/${boxname}"
  #[ -e ${G3HOME}/vagrant/${boxname}/Vagrantfile ] && rm ${G3HOME}/vagrant/${boxname}/Vagrantfile
  cd ${G3HOME}/vagrant/${boxname} && git checkout ${boxname} && git pull -ff
  #cd ${G3HOME}/vagrant/${boxname} && git checkout ${boxname} && git config pull.rebase false && git pull
  #cd ${G3HOME}/vagrant/${boxname} && git fetch --all
  get_inventory
  get_ansible_requirements
}

function manage_plugins () {
  vagrant plugin update
  plugins=(vagrant-vbguest micromachine vagrant-disksize)
  for plugin in ${plugins[@]}
  do
    echo "Vagrant - checking plugin - ${plugin}"
    vagrant plugin list | egrep "${plugin}" || vagrant plugin install ${plugin}
  done

}

function get_inventory () {
  curl -sL -o ${G3HOME}/vagrant/${boxname}/hosts https://armory.galaxy3.net/vagrant/pkgs/files/etc/ansible/hosts
}

function get_ansible_requirements () {
  curl -sL -o ${G3HOME}/vagrant/${boxname}/requirements.yml https://armory.galaxy3.net/vagrant/pkgs/files/etc/ansible/requirements.yml
}

function die () {
    echo "${1}"
    exit 1
}

. $(dirname ${0})/g3common

export boxname=$(basename ${0})

which VBoxManage || export PATH=/c/Program\ Files/Oracle/VirtualBox:${PATH}

[ "${VBOX_DIR:-notset}" == "notset" ] && export VBOX_DIR="$(vbox_dir)"

export BOX_DIR="${G3HOME}/vagrant/${boxname}"

cat <<__EOD__

  Default Virtualbox VM Directory: ${VBOX_DIR}

  - - ${boxname} ${*} - -

__EOD__

stat "${BOX_DIR}" || git_clone

cd "${BOX_DIR}" || die "${BOX_DIR} directory does not exist"

cat <<__EOD__

  Git Info

    Branch: $(git branch 2>&1 | egrep '^*')
    CWD:    $(pwd)


__EOD__

printf "Confirming VirtualBox Installation . . . "
which VBoxManage || printf " Not Installed\n\nAborting . . .\n\n"

case "${1}" in

  "destroy") destroy ${*}
    ;;

  "reload")  reload ${*}
    ;;

  "up" | "resume")  up ${*}
    ;;

  "halt" | "suspend")  halt ${*}
    ;;

  "port") vagrant port
    ;;

  "status") vagrant status
    ;;

  "ssh" | "rdp") ssh_rdp ${*}
    ;;

  "box") vagrant ${*}
    ;;

   *)  echo "usage" ; exit 1
       ;;
esac
