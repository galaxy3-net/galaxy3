# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "generic/ubuntu2004"
  config.vm.hostname = "endor"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 55031, host_ip: "127.0.0.1"
  config.vm.network "forwarded_port", guest: 22, host: 55031, host_ip: "127.0.0.1", auto_correct: true
  config.vm.network "forwarded_port", guest: 5901, host: 55032, host_ip: "127.0.0.1", auto_correct: true
  config.vm.network "forwarded_port", guest: 5902, host: 55033, host_ip: "127.0.0.1",  auto_correct: true
  config.vm.network "forwarded_port", guest: 3389, host: 55034, host_ip: "127.0.0.1",  auto_correct: true
  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"
  config.vm.network "private_network", ip: "10.55.55.3"
  #config.vm.network "private_network", ip: "10.55.55.105"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"
  config.vm.synced_folder	"../../../bind",	"/bind"
  config.vm.synced_folder	"../../",	"/vagrant"
  config.vm.synced_folder "../../.keys", "/thedr/.ssh"
  config.vm.synced_folder "../../ansible", "/ansible"
  config.vm.synced_folder "../../ansible/etc/ansible/", "/etc/ansible/"
  config.vm.synced_folder "../../../repos", "/repos"
  config.vm.synced_folder "../../../Downloads", "/Downloads"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
    config.vm.provider "virtualbox" do |vb|
      # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
   
      # Customize the amount of memory on the VM:
      vb.name = "Endor"
      vb.memory = "1024"
      vb.customize ['modifyvm', :id, '--nictype0', 'virtio']
      vb.customize ['modifyvm', :id, '--nictype1', 'virtio']
      vb.customize ['modifyvm', :id, '--nictype2', 'virtio']
      vb.customize ['modifyvm', :id, '--nictype3', 'virtio']
    end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
   config.vm.provision "shell", inline: <<-SHELL
     apt-get update
     apt-get install -yq apache2 make docker docker.io net-tools ansible
     useradd -d /thedr -c thedr -m -s /bin/bash -u 2001 -U thedr
     rm /etc/resolv.conf
     cp /vagrant/resolv.conf /etc/resolv.conf
     . /ansible/bin/key_setup.sh
     cp /ansible/roles/dns-master/files/named.service /etc/systemd/system/.
     su - vagrant bash -c "cd /bind/Docker && git pull"
     systemctl enable named
     systemctl start named
     #ifconfig eth1:0 10.55.55.2 netmask 255.255.255.0 up
SHELL
end
